{"version":3,"sources":["DevSession.js"],"names":["async","projectRoot","exp","forceUpdate","keepUpdating","Config","offline","let","user","await","UserManager","getCurrentUserAsync","Error","url","UrlUtils","constructManifestUrlAsync","apiClient","ApiV2Client","clientForUser","postAsync","data","session","description","name","os","hostname","config","slug","primaryColor","source","e","logger","global","debug","setTimeout","startSession","UPDATE_FREQUENCY_SECS","stopSession"],"mappings":";;;;;;;AAcA;;+BACOA,WACLC,WADKD,EAELE,GAFKF,EAGLG,cAAuB,KAHlBH,EAIU;AACf,QAAIG,WAAJ,EAAiB;AACfC,qBAAe,IAAfA;AACF;;AAEA,QAAI,CAACC,oCAAOC,OAAR,IAAmBF,YAAvB,EAAqC;AACnC;AACAG,UAAIC,OAAOC,MAAMC,gCAAYC,mBAAZD,EAAjBH;;AAEA,UAAI,CAACC,IAAL,EAAW;AACT,cAAM,IAAII,KAAJ,CAAU,gEAAV,CAAN;AACF;;AAEA,UAAI;AACFL,YAAIM,MAAMJ,MAAMK,gCAASC,yBAATD,CAAmCb,WAAnCa,CAAhBP;AACAA,YAAIS,YAAYC,gCAAYC,aAAZD,CAA0BT,IAA1BS,CAAhBV;AACAE,cAAMO,UAAUG,SAAVH,CAAoB,mCAApBA,EAAyD;AAC7DI,gBAAM;AACJC,qBAAS;AACPC,2BAAc,GAAEpB,IAAIqB,IAAK,OAAMC,YAAGC,QAAHD,EAAc,EADtC;AAEPC,wBAAUD,YAAGC,QAAHD,EAFH;AAGPE,sBAAQ;AACN;AACAJ,6BAAapB,IAAIoB,WAFX;AAGNC,sBAAMrB,IAAIqB,IAHJ;AAINI,sBAAMzB,IAAIyB,IAJJ;AAKNC,8BAAc1B,IAAI0B;AALZ,eAHD;AAUPf,iBAVO;AAWPgB,sBAAQ;AAXD;AADL;AADuD,SAAzDb,CAANP;AAiBF,OApBA,CAoBE,OAAOqB,CAAP,EAAU;AACVC,4CAAOC,MAAPD,CAAcE,KAAdF,CAAoBD,CAApBC,EAAwB,+BAA8BD,CAAE,EAAxDC;AACF;;AAEAG,iBAAW;AAAA,eAAMC,aAAalC,WAAbkC,EAA0BjC,GAA1BiC,CAAN;AAAA,OAAXD,EAAiDE,wBAAwB,IAAzEF;AACF;AACF,G;;kBA3CsBC,Y;;;;;QA6CNE,W,GAAAA,W;;AA1DhB;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;;AAEA,MAAMD,wBAAwB,EAA9B;;AAEA7B,IAAIH,eAAe,IAAnBG,CAgDO,SAAS8B,WAAT,GAAuB;AAC5BjC,iBAAe,KAAfA;AACF","file":"../DevSession.js","sourcesContent":["// @flow\n\nimport os from 'os';\n\nimport ApiV2Client from './ApiV2';\nimport Config from './Config';\nimport logger from './Logger';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager from './User';\n\nconst UPDATE_FREQUENCY_SECS = 20;\n\nlet keepUpdating = true;\n\n// TODO notify www when a project is started, and every N seconds afterwards\nexport async function startSession(\n  projectRoot: string,\n  exp: any,\n  forceUpdate: boolean = false\n): Promise<void> {\n  if (forceUpdate) {\n    keepUpdating = true;\n  }\n\n  if (!Config.offline && keepUpdating) {\n    // TODO(anp) if the user has configured device ids, then notify for those too\n    let user = await UserManager.getCurrentUserAsync();\n\n    if (!user) {\n      throw new Error('development sessions can only be initiated for logged in users');\n    }\n\n    try {\n      let url = await UrlUtils.constructManifestUrlAsync(projectRoot);\n      let apiClient = ApiV2Client.clientForUser(user);\n      await apiClient.postAsync('development-sessions/notify-alive', {\n        data: {\n          session: {\n            description: `${exp.name} on ${os.hostname()}`,\n            hostname: os.hostname(),\n            config: {\n              // TODO: if icons are specified, upload a url for them too so people can distinguish\n              description: exp.description,\n              name: exp.name,\n              slug: exp.slug,\n              primaryColor: exp.primaryColor,\n            },\n            url,\n            source: 'desktop',\n          },\n        },\n      });\n    } catch (e) {\n      logger.global.debug(e, `Error updating dev session: ${e}`);\n    }\n\n    setTimeout(() => startSession(projectRoot, exp), UPDATE_FREQUENCY_SECS * 1000);\n  }\n}\n\nexport function stopSession() {\n  keepUpdating = false;\n}\n"],"sourceRoot":"/xdl/src"}